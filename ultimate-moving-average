// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © falcoerwin

//@version=5
indicator(title='DFK Moving Average', overlay = true)

TitleMA = "MOVING AVERAGE"
maSrc = input(title='MA Source', defval=close)

ma1Type = input.string(title='MA1 Type', defval='TEMA', options=['ALMA', 'EMA', 'DEMA', 'TEMA', 'WMA', 'VWMA', 'SMA', 'SMMA', 'HMA', 'LSMA', 'Kijun', 'McGinley'], group = TitleMA)
ma2Type = input.string(title='MA2 Type', defval='TEMA', options=['ALMA', 'EMA', 'DEMA', 'TEMA', 'WMA', 'VWMA', 'SMA', 'SMMA', 'HMA', 'LSMA', 'Kijun', 'McGinley'], group = TitleMA)
ma3Type = input.string(title='MA3 Type', defval='TEMA', options=['ALMA', 'EMA', 'DEMA', 'TEMA', 'WMA', 'VWMA', 'SMA', 'SMMA', 'HMA', 'LSMA', 'Kijun', 'McGinley'], group = TitleMA)
ma4Type = input.string(title='MA4 Type', defval='TEMA', options=['ALMA', 'EMA', 'DEMA', 'TEMA', 'WMA', 'VWMA', 'SMA', 'SMMA', 'HMA', 'LSMA', 'Kijun', 'McGinley'], group = TitleMA)
ma5Type = input.string(title='MA5 Type', defval='TEMA', options=['ALMA', 'EMA', 'DEMA', 'TEMA', 'WMA', 'VWMA', 'SMA', 'SMMA', 'HMA', 'LSMA', 'Kijun', 'McGinley'], group = TitleMA)

ma1Length = input(title='MA1 Length', defval=14, group = TitleMA)
ma2Length = input(title='MA2 Length', defval=20, group = TitleMA)
ma3Length = input(title='MA3 Length', defval=50, group = TitleMA)
ma4Length = input(title='MA4 Length', defval=100, group = TitleMA)
ma5Length = input(title='MA5 Length', defval=200, group = TitleMA)

lsma_offset = 0
alma_offset = 0.85
alma_sigma = 6

ma(type, src, len) =>
    float result = 0
    if type == 'SMA'  // Simple
        result := ta.sma(src, len)
        result
    if type == 'EMA'  // Exponential
        result := ta.ema(src, len)
        result
    if type == 'DEMA'  // Double Exponential
        e = ta.ema(src, len)
        result := 2 * e - ta.ema(e, len)
        result
    if type == 'TEMA'  // Triple Exponential
        e = ta.ema(src, len)
        result := 3 * (e - ta.ema(e, len)) + ta.ema(ta.ema(e, len), len)
        result
    if type == 'WMA'  // Weighted
        result := ta.wma(src, len)
        result
    if type == 'VWMA'  // Volume Weighted
        result := ta.vwma(src, len)
        result
    if type == 'SMMA'  // Smoothed
        w = ta.wma(src, len)
        result := na(w[1]) ? ta.sma(src, len) : (w[1] * (len - 1) + src) / len
        result
    if type == 'RMA'
        result := ta.rma(src, len)
        result
    if type == 'HMA'  // Hull
        result := ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))
        result
    if type == 'LSMA'  // Least Squares
        result := ta.linreg(src, len, lsma_offset)
        result
    if type == 'ALMA'  // Arnaud Legoux
        result := ta.alma(src, len, alma_offset, alma_sigma)
        result
    if type == 'Kijun'  //Kijun-sen
        kijun = math.avg(ta.lowest(len), ta.highest(len))
        result := kijun
        result
    if type == 'McGinley'
        mg = 0.0
        mg := na(mg[1]) ? ta.ema(src, len) : mg[1] + (src - mg[1]) / (len * math.pow(src / mg[1], 4))
        result := mg
        result
    result

ma1 = ma(ma1Type, maSrc, ma1Length)
ma2 = ma(ma2Type, maSrc, ma2Length)
ma3 = ma(ma3Type, maSrc, ma3Length)
ma4 = ma(ma4Type, maSrc, ma4Length)
ma5 = ma(ma5Type, maSrc, ma5Length)

plot(ma1, color=color.blue, linewidth=2, title="MA1 (Moving Average)")
plot(ma2, color=color.red, linewidth=2, title="MA2 (Moving Average)")
plot(ma3, color=color.green, linewidth=2, title="MA3 (Moving Average)")
plot(ma4, color=color.orange, linewidth=2, title="MA4 (Moving Average)")
plot(ma5, color=color.purple, linewidth=2, title="MA5 (Moving Average)")
